
1탄 - API란?
안녕하세요👋오늘 우리는 프론트엔드계의 꽃🌹 API 를 배울거에요.



API의 사전적 정의📚
API(Application Programming Interface 애플리케이션 프로그래밍 인터페이스[*], 

응용 프로그램 프로그래밍 인터페이스)는 컴퓨터나 컴퓨터 프로그램 사이의 연결이다. 

일종의 소프트웨어 인터페이스이며 다른 종류의 소프트웨어에 서비스를 제공한다.

[1] 이러한 연결이나 인터페이스를 빌드하거나 사용하는 방법을 기술하는 문서나 표준은 API 사양으로 부른다.

라고 하면 아주 와닿지 않는 설명이니 한마디로 말해서 서버(백엔드)와 클라이언트(프론트엔드) 사이의 대화 

라고 이해하면 쉽다.



프론트엔드와 백엔드💻

프론트엔드 는 유저에게 보여지는 부분이다 이를 레스토랑으로 비유를하면 손님이 와서 보는 

의자, 식탁, 분위기, 메뉴 이런것들을 프론트엔드라고 할수있겠다. 

유저와 소통하는 부분이고 프론트엔드에 속하는 범위는 HTML,CSS,자바스크립트,리액트 등이 있다.


백엔드는 보여줄 내용이다. 유저에게 무엇을 보여줄지, 어떤내용을 보여줄지 정보를 들고있는 부분이고 

프론트엔드의요청에 따라 백엔드는 데이터를 제공해준다. 마치 레스토랑에 주방이라고 보면된다. 

손님이 주문한 음식에따라 주방은 준비를해서 요리를 내놓는다. 

백엔드에 속하는 범위는 nodejs, mongoDB,Java,Oracle, MySQL과같은 데이터베이스영역이다.


API는 그 사이에서 대화를 주고받도록 도와주는 레스토랑 웨이터라고 보면 쉽겠다.





이번 프로젝트 소개🧐
이번에 저희가 만들 프로젝트는 Times News 웹사이트입니다!📰

이번 프로젝트: https://noona-times.netlify.app/#js-bottom
(api가 만료가되면 제 웹사이트에 뉴스가 안나올 수도 있습니다 

그렇게되면 실제 뉴욕 times website를 참고해주세요!)
실제 Times website: https://www.nytimes.com/international/


뉴스 api를 이용하여 타임즈 웹사이트를 만들 예정입니다!

News api 웹사이트: https://docs.newscatcherapi.com/api-docs/endpoints/search-news


한번 어떻게하면 api를 사용할 수 있는지 볼까요?

-------------------------------------------------------------------------------

2탄 - API 문서읽기


이번에 저희가 사용할 api입니다

News api 웹사이트: https://docs.newscatcherapi.com/api-docs/endpoints/search-news

(이 API는 한달만 무료입니다 ㅠ 그래서 api가 만료가 되면 다시 새로운 api key를 새 계정으로 받으시거나 
돈을 내셔야 합니당 😥)

API사용에 앞어서 가장 중요한것은 API문서 읽어보기🧐입니다.

API는 상호 약속한 룰을 가지고 정보를 주고받는것이기 때문에 

각각 API별로 룰이 다릅니다 그래서 API문서를 읽어보실 때 주의깊게 보셔야하는건

API endpoint 별 주는 데이터
API 인증 방법 (api key로 인증을 하나? 아니면 토큰으로 인증을하나?)
Query로 쓸 수 있는 인자들
API 응답내용들 (어떤 결과를 내가 받아볼 수 있는지)


이번 프로젝트 설명🔍

이번에 저희가 만들 프로젝트는 Times News 웹사이트입니다!📰

이번 프로젝트: https://noona-times.netlify.app/#js-bottom
(api가 만료가되면 제 웹사이트에 뉴스가 안나올 수도 있습니다 

그렇게되면 실제 뉴욕 times website를 참고해주세요!)

실제 Times website: https://www.nytimes.com/international/




주요기능📃




유저는 최신 뉴스를 볼 수 있다.
뉴스에는 사진, 제목, 내용, 출처,날짜가 있다.
뉴스를 sport, tech, business등 카테고리별로 볼 수 있다.
뉴스를 검색할 수 있다.
웹사이트는 반응형 웹페이지다.
pagenation으로 다음 뉴스정보를 받아볼 수 있다.





이번 프로젝트에 웹사이트에 아주 중요한 개념이 왕창🎇들어갈 예정입니다! 
api호출부터 검색, pagenation까지 아주많이 들어갈꺼니까 
여러분들 어려워도 끝까지 와야합니다! 그럼 준비 단단히하고 출발!🚀

-------------------------------------------------------------------------------

3탄 - Postman


먼저 API 사이트에 가입을 하고 API-key => token을 얻어보자.

얻었다.

VrKECsFqNvXqOoeT-ubrqiM8FUafbe6UQ1MRb2hQ2Ls



이번시간에는 Postman 이라는 툴을 이용하여 api를 불러볼거에요!

Postman: https://www.postman.com/
포스트맨은 앱을 다운받아주셔도 되고 크롬 app으로 받으셔도 됩니다!


HTTP Request 📢
우리가 서버로 보내는 각각의 HTTP요청은 이런 구조를 가지고있다.

HTML처럼 Header과 Body로 나뉘어져 있다. 

Header에는 이 문서의 타입 또는 인증을위한 api key나 토큰값 등을 넣을 수 있다.

Body에는 실제 내용이 들어간다.



내 api 요청에 header와 body를 확인하고싶다면 network 탭에서 확인이가능하다


http request method ✨

API를 호출하는 명령어에는 크게 4가지 종류가 있습니다

GET : 데이터를 얻어온다 (기본값)

PUT: 데이터를 수정한다

POST: 데이터를 생성한다

DELETE: 데이터를 삭제한다

이번시간에는 GET 명령어만 써볼것이지만 앞으로 백엔드까지 배우시면 이 4가지를 모두 써보실 수 있습니다! 

지금은 남의 서버에서 데이터를 받아오는것이라서 남의 데이터를 수정하거나 생성하거나 

삭제할 수는 없기 때문에 GET만 사용합시다!

-------------------------------------------------------------------------------

4탄!!

 api가 자바스크립트 내부에서 어떻게호출이 되는지 이해하기 위해선

 자바스크립트의 동작 원리에 대해서 간단히 아셔야 합니다! 그래서 우리 코드는 잠시 여기서 멈춰두고

 자바스크립트의 동작원리를 배우러 가볼까요?👀

-------------------------------------------------------------------------------

5탄 - 자바스크립트의 동작 원리



 console.log(1);
 setTimeout(()=>{
   console.log(2);
 },2000);
 console.log(3);



 자바스크립트의 구성 요소

 Stack 📚


 자바스크립트코드가 실행되면 스택 프레임이 쌓이는 장소
 
 스택에 새로운 프레임이 들어오고 실행이 완료되면 나간다.

 드럼통 처럼 생겨서 First In Last Out구조의 자료형이다

 즉 처음에 들어간게 제일 마지막에 나간다 (그림참조)

 예제: 다음 코드가 stack에 어떻게 들어가는지 살펴보자 

function add(x, y){   

   return x+y;
}
function first(){   

   var i = add(1,1);    

   console.log(i);
}
first();



메모리 Heap📃

대기실
동적으로 생성된 변수들은 메모리 heap에가서 저장이 된다



테스크 Queue🔄
웹api로 부터 받은 테스크를 큐에 저장해둔다. 스택이 비면 이벤르 루프가 큐에 아이템을 꺼내다 스택으로 올린다.
First In First Out의 자료구조 형태이다



Event Loop⌚
스택과 큐 사이에서 흐름을 제어한다
이벤트 루프는 스택이 비어있는지 확인을하고 비어있으면 큐에있는 아이템을 꺼내다 스택에 올려준다.


웹 api 🎇
Ajax 요청, setTimeout(), 이벤트 핸들러의 등록과 같이 웹 브라우저에서 제공하는 기능들을 말한다.
 이들은 자바스크립트의 쓰레드(스택)에서 작업이 이루어지는것이 아닌 별도의 쓰레드에서 이루어진다

setTimeOut(함수,시간): 시간만큼 코드를 딜레이시키고 함수를 실행한다. 
시간은 참고로 마이크로세컨드 단위이기 때문에 1초는 1000ms이다
Ajax, Axios, fetch: 클라이언트와 서버간에 데이터를 주고받는 기술
Event Handler : 클릭과같은 이벤트를 핸들하는 함수들

쓰레드 ✏
쓰레드(Thread)란 실제로 작업을 실행하는 주체이다. 쓰레드는 1개이거나 여러개일 수 있다. 
자바스크립트는 싱글(1개)쓰레드만 있다. 쓰레드가 1개이면 하니씩밖에 일을 처리 못해서 동기적으로 일을 처리한다.
 멀티 쓰레드라면 (1개이상) 여러개의 작업을 병렬적으로 처리할 수 있다. 
자바스크립트는 싱글스레드로 동기적 처리를 한다는 것을 명심하자



그래서 이 기나긴 설명을 걸쳐 누나가하고싶은말은 뭐지? 🤔


API호출은 시간이 걸리는 코드이다. 그래서 우리는 코드가 다음줄로 안넘어가고 이 api호출을 기다리게 할것이다

그래서 현재까지 작성된 코드들을 번호 순서대로 나열해보자면 ?

1번 url 만들고 처리되서 stack에서 사라짐
2번 header 만들고 처리되고 사라짐
3번 ? 얘는 서버에 요청하는 아이이기때문에 heap으로 보내버림
4번 ? 엥 얘는 3번이 처리 되어야 실행 되는 아이라서 이거 에러가 나버리는 건가 ? 
실제로 에러가 나야지 정상이다 왜냐? 서버로 부터 데이터를 받아와줘야하는 3번이 실행이 안됐기 때문이다

그래서 개발자들이 이러한 상황에 대처하기 위해

async await 이라는 프로그램 실행을 강제적으로 기다리게 해주는 코드를 만들어 두었다. 

이걸 쓰면 된다.

참고로 데이터를 요청하는 방식은 간단하게 3가지로 볼 수 있다. // ajax, http, fetch

누나쌤은 fetch가 제일 심플하고 좋단다.

Promise {<pending>} : 데이터가 아직 안온상태.



-------------------------------------------------------------------------------


6탄 - API 부르기

API부르는 방식이 주로
ajax, axios, fetch가 있음. 이중에 fetch가 제일 간단함. 

(기회가대면 react강의에서는 axios를 다루는 법을 해볼게요!)


Promise🤙
자바스크립트에서 비동기 동작을 다루는 하나의 패턴이다

promise가 나온 배경을 살펴보자🔍
예전에는 promise 대신에 콜백함수를 이용해서 비동기를 처리함
예를들면



$.ajax("http://api.newscatcher.com/v2/search", (result) =>{
console.log(result);
});
저 url이 호출되고 결과가 나오면 두번째 매개변수인 콜백함수를 불러서 result에 결과값을 넘겨줌 .
근데 이렇게하면 가독성이 좀 떨어짐. (이걸 콜백지옥이라고한다. 함수안에 함수, 함수안에함수, 
이렇게 꼬리에 꼬리를 무는 형태... 궁금하면 콜백지옥 구글에 처보도록!)
(대충 이런 느낌이다)



그래서 나온게 promise 이고

Promsie는 이렇게 생겼다


function delayP(sec){
   return new Promise((resolve, reject) => {    
      setTimeout(() => {    
         resolve("success");    
      }, sec * 1000);    
   });
}
new Promise를 이용해서 promise를 생성하고
promise 안에서는 resolve와 reject함수를 자동으로 갖는다.
reslove는 결과가 문제없이 성공적으로 수행될때 호출하는 함수, 
reject는 중간에 에러가나면 에러를 처리할 수 있는 함수이다.
resolve가 호출이되면 죽음의 콜백대신 .then()이나 
async/await을 이용하여(둘다 하는 일이 비슷하다.) 
그 결과값을 받아서 다른 일을 할수있다(결과를 보여준다던가 그런것들)


async/await🚦
async와 await은 동기적인 자바스크립트를 비동기적으로 처리하기위해쓴다.

 fetch는 promise를 리턴을한다. 

그리고 우리가 필요한건 그 promise 속에서 api호출이 잘 이루어져 데이터를 받은다음 

promise가 성공적으로 resolve 함수를 호출하기를 기다리는것이다. 이걸 해주는게 await이다.

 await은 promise가 resolve또는 reject를 호출할때 까지 기다려준다.

await이 없으면 그냥 날것 그대로의 promise가 리턴된다(우리가 영상에서 본것처럼)

await을 쓰려면 함수를 async로 선언해줘야한다, 둘은 세트라고 보면된다.

그것외에도 async로 함수를 선언하면 그함수는 자동으로 promise를 반환한다
(그말의 뜻은 또 이함수를 받아다가 다른 비동기 작업이 가능하다는 뜻이다)


json
서버 클라이언트 통신에서 많이 쓰이는 데이터 타입 (png, jpg이런것과 같이 어떤 그냥 데이터 타입임).

 객체랑 똑같이생긴 텍스트라고 이해하면 좋음. 
간단한 텍스트인데 객체랑 똑같애서 나중에 읽어오기도 편함. 

그래서 json타입을 서버통신시 많이 사용함.
fetch를 쓸때 항상 이 패턴


let response = await fetch(url)
let data = await response.json()
은 세트로 많이쓰이니 외워두면 좋음





나 이거 다 모르겠고…누나 기억해야할 하나만 알려줘… 😥
라고한다면 이 패턴만 기억하라

API호출하고 싶을 때

const callAPI = async() =>{
    let url = new URL(`url주소`)
    let header = new Headers({헤더내용}) // 이건 필요한 경우만
    let response = await fetch(url,{headers:header})
    let data = await response.json()
}


-------------------------------------------------------------------------------


7탄 -HTML/CSS
이번시간에는 예전으로 돌아가 HTML/CSS작업을 간단하게 해주었는데요.
이쯤에서 해보는 HTML/CSS 챌린지!!

프로젝트 웹사이트: https://noona-times.netlify.app/#js-program-detail-bottom
(api키가 만료가 되면 뉴스가 안보일 수 있습니다 ㅠ)


⛰HTML/CSS 챌린지
1. 사이드 메뉴
웹사이트 버전에서는 카테고리 버튼들이 웹사이트 타이틀 밑에 있다가, 모바일 버전에서는 카테고리 메뉴들이 사라지고 왼쪽 상단에 햄버거 메뉴들이 나오도록 하자. 그리고 햄버거 메뉴를 클릭할 시 사이드 메뉴가 나올 수 있도록 하자.

참고 예제: https://www.w3schools.com/howto/howto_js_sidenav.asp

웹사이트 버전에서는 웹사이트 타이틀 하단에 카테고리메뉴가 있다.


모바일 버전시 카테고리메뉴는 사라지고 햄버거 메뉴가 나온다.


햄버거 메뉴를 누르면 사이드메뉴가 나온다.




2. 검색창 보이고 숨기기
왼쪽 상단에 검색 아이콘을 붙인다


검색 아이콘을 누르면 검색창이 나오고 다시 누르면 사라진다



  정답
https://hackmd.io/@oW_dDxdsRoSpl0M64Tfg2g/rJhHenxYt


⛰과제 - 현재 console에서만 보이는 news데이터들을 UI에 그려보자




다음챕터에서는 우리가 api에서 받은 news데이터를 가지고 웹사이트에 보여주는 render부분을 진행합니다.

 (이거 todo리스트에서 했던 render랑 비슷한거 같은데?🤔) 

이 render부분은 여러분들이 다음챕터 영상 보기전에 스스로 한번 해보시기를 간곡히 부탁한다.

 (라고 쓰고 명령이라 읽는다.)

정답은 이 프로젝트 가장 마지막 챕터에 최종 코드 공유해드립니다 그전까지 끝까지 고민해서해보기!


-------------------------------------------------------------------------------